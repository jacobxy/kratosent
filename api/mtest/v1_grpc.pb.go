// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: api/mtest/v1.proto

package mtest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// V1Client is the client API for V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1Client interface {
	CreateV1(ctx context.Context, in *CreateV1Request, opts ...grpc.CallOption) (*CreateV1Reply, error)
	UpdateV1(ctx context.Context, in *UpdateV1Request, opts ...grpc.CallOption) (*UpdateV1Reply, error)
	DeleteV1(ctx context.Context, in *DeleteV1Request, opts ...grpc.CallOption) (*DeleteV1Reply, error)
	GetV1(ctx context.Context, in *GetV1Request, opts ...grpc.CallOption) (*GetV1Reply, error)
	ListV1(ctx context.Context, in *ListV1Request, opts ...grpc.CallOption) (*ListV1Reply, error)
}

type v1Client struct {
	cc grpc.ClientConnInterface
}

func NewV1Client(cc grpc.ClientConnInterface) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) CreateV1(ctx context.Context, in *CreateV1Request, opts ...grpc.CallOption) (*CreateV1Reply, error) {
	out := new(CreateV1Reply)
	err := c.cc.Invoke(ctx, "/api.mtest.V1/CreateV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) UpdateV1(ctx context.Context, in *UpdateV1Request, opts ...grpc.CallOption) (*UpdateV1Reply, error) {
	out := new(UpdateV1Reply)
	err := c.cc.Invoke(ctx, "/api.mtest.V1/UpdateV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) DeleteV1(ctx context.Context, in *DeleteV1Request, opts ...grpc.CallOption) (*DeleteV1Reply, error) {
	out := new(DeleteV1Reply)
	err := c.cc.Invoke(ctx, "/api.mtest.V1/DeleteV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) GetV1(ctx context.Context, in *GetV1Request, opts ...grpc.CallOption) (*GetV1Reply, error) {
	out := new(GetV1Reply)
	err := c.cc.Invoke(ctx, "/api.mtest.V1/GetV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ListV1(ctx context.Context, in *ListV1Request, opts ...grpc.CallOption) (*ListV1Reply, error) {
	out := new(ListV1Reply)
	err := c.cc.Invoke(ctx, "/api.mtest.V1/ListV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1Server is the server API for V1 service.
// All implementations must embed UnimplementedV1Server
// for forward compatibility
type V1Server interface {
	CreateV1(context.Context, *CreateV1Request) (*CreateV1Reply, error)
	UpdateV1(context.Context, *UpdateV1Request) (*UpdateV1Reply, error)
	DeleteV1(context.Context, *DeleteV1Request) (*DeleteV1Reply, error)
	GetV1(context.Context, *GetV1Request) (*GetV1Reply, error)
	ListV1(context.Context, *ListV1Request) (*ListV1Reply, error)
	mustEmbedUnimplementedV1Server()
}

// UnimplementedV1Server must be embedded to have forward compatible implementations.
type UnimplementedV1Server struct {
}

func (UnimplementedV1Server) CreateV1(context.Context, *CreateV1Request) (*CreateV1Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateV1 not implemented")
}
func (UnimplementedV1Server) UpdateV1(context.Context, *UpdateV1Request) (*UpdateV1Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateV1 not implemented")
}
func (UnimplementedV1Server) DeleteV1(context.Context, *DeleteV1Request) (*DeleteV1Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteV1 not implemented")
}
func (UnimplementedV1Server) GetV1(context.Context, *GetV1Request) (*GetV1Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetV1 not implemented")
}
func (UnimplementedV1Server) ListV1(context.Context, *ListV1Request) (*ListV1Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListV1 not implemented")
}
func (UnimplementedV1Server) mustEmbedUnimplementedV1Server() {}

// UnsafeV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1Server will
// result in compilation errors.
type UnsafeV1Server interface {
	mustEmbedUnimplementedV1Server()
}

func RegisterV1Server(s grpc.ServiceRegistrar, srv V1Server) {
	s.RegisterService(&V1_ServiceDesc, srv)
}

func _V1_CreateV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).CreateV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.mtest.V1/CreateV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).CreateV1(ctx, req.(*CreateV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_UpdateV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).UpdateV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.mtest.V1/UpdateV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).UpdateV1(ctx, req.(*UpdateV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_DeleteV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).DeleteV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.mtest.V1/DeleteV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).DeleteV1(ctx, req.(*DeleteV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_GetV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).GetV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.mtest.V1/GetV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).GetV1(ctx, req.(*GetV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ListV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ListV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.mtest.V1/ListV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ListV1(ctx, req.(*ListV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// V1_ServiceDesc is the grpc.ServiceDesc for V1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.mtest.V1",
	HandlerType: (*V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateV1",
			Handler:    _V1_CreateV1_Handler,
		},
		{
			MethodName: "UpdateV1",
			Handler:    _V1_UpdateV1_Handler,
		},
		{
			MethodName: "DeleteV1",
			Handler:    _V1_DeleteV1_Handler,
		},
		{
			MethodName: "GetV1",
			Handler:    _V1_GetV1_Handler,
		},
		{
			MethodName: "ListV1",
			Handler:    _V1_ListV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/mtest/v1.proto",
}
