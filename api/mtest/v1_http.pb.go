// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.6
// source: api/mtest/v1.proto

package mtest

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationV1CreateV1 = "/api.mtest.V1/CreateV1"

type V1HTTPServer interface {
	CreateV1(context.Context, *CreateV1Request) (*CreateV1Reply, error)
}

func RegisterV1HTTPServer(s *http.Server, srv V1HTTPServer) {
	r := s.Route("/")
	r.GET("/mtest", _V1_CreateV10_HTTP_Handler(srv))
}

func _V1_CreateV10_HTTP_Handler(srv V1HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateV1Request
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationV1CreateV1)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateV1(ctx, req.(*CreateV1Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateV1Reply)
		return ctx.Result(200, reply)
	}
}

type V1HTTPClient interface {
	CreateV1(ctx context.Context, req *CreateV1Request, opts ...http.CallOption) (rsp *CreateV1Reply, err error)
}

type V1HTTPClientImpl struct {
	cc *http.Client
}

func NewV1HTTPClient(client *http.Client) V1HTTPClient {
	return &V1HTTPClientImpl{client}
}

func (c *V1HTTPClientImpl) CreateV1(ctx context.Context, in *CreateV1Request, opts ...http.CallOption) (*CreateV1Reply, error) {
	var out CreateV1Reply
	pattern := "/mtest"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationV1CreateV1))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
