// Code generated by ent, DO NOT EDIT.

package department

import (
	"kratosent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldID, id))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v int8) predicate.Department {
	vc := int8(v)
	return predicate.Department(sql.FieldEQ(FieldIsDeleted, vc))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldUpdateAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldName, v))
}

// ParentDepartmentID applies equality check predicate on the "parent_department_id" field. It's identical to ParentDepartmentIDEQ.
func ParentDepartmentID(v int64) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldParentDepartmentID, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v int8) predicate.Department {
	vc := int8(v)
	return predicate.Department(sql.FieldEQ(FieldIsDeleted, vc))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v int8) predicate.Department {
	vc := int8(v)
	return predicate.Department(sql.FieldNEQ(FieldIsDeleted, vc))
}

// IsDeletedIn applies the In predicate on the "is_deleted" field.
func IsDeletedIn(vs ...int8) predicate.Department {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int8(vs[i])
	}
	return predicate.Department(sql.FieldIn(FieldIsDeleted, v...))
}

// IsDeletedNotIn applies the NotIn predicate on the "is_deleted" field.
func IsDeletedNotIn(vs ...int8) predicate.Department {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int8(vs[i])
	}
	return predicate.Department(sql.FieldNotIn(FieldIsDeleted, v...))
}

// IsDeletedGT applies the GT predicate on the "is_deleted" field.
func IsDeletedGT(v int8) predicate.Department {
	vc := int8(v)
	return predicate.Department(sql.FieldGT(FieldIsDeleted, vc))
}

// IsDeletedGTE applies the GTE predicate on the "is_deleted" field.
func IsDeletedGTE(v int8) predicate.Department {
	vc := int8(v)
	return predicate.Department(sql.FieldGTE(FieldIsDeleted, vc))
}

// IsDeletedLT applies the LT predicate on the "is_deleted" field.
func IsDeletedLT(v int8) predicate.Department {
	vc := int8(v)
	return predicate.Department(sql.FieldLT(FieldIsDeleted, vc))
}

// IsDeletedLTE applies the LTE predicate on the "is_deleted" field.
func IsDeletedLTE(v int8) predicate.Department {
	vc := int8(v)
	return predicate.Department(sql.FieldLTE(FieldIsDeleted, vc))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldUpdateAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Department {
	return predicate.Department(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldName, v))
}

// ParentDepartmentIDEQ applies the EQ predicate on the "parent_department_id" field.
func ParentDepartmentIDEQ(v int64) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldParentDepartmentID, v))
}

// ParentDepartmentIDNEQ applies the NEQ predicate on the "parent_department_id" field.
func ParentDepartmentIDNEQ(v int64) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldParentDepartmentID, v))
}

// ParentDepartmentIDIn applies the In predicate on the "parent_department_id" field.
func ParentDepartmentIDIn(vs ...int64) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldParentDepartmentID, vs...))
}

// ParentDepartmentIDNotIn applies the NotIn predicate on the "parent_department_id" field.
func ParentDepartmentIDNotIn(vs ...int64) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldParentDepartmentID, vs...))
}

// ParentDepartmentIDGT applies the GT predicate on the "parent_department_id" field.
func ParentDepartmentIDGT(v int64) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldParentDepartmentID, v))
}

// ParentDepartmentIDGTE applies the GTE predicate on the "parent_department_id" field.
func ParentDepartmentIDGTE(v int64) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldParentDepartmentID, v))
}

// ParentDepartmentIDLT applies the LT predicate on the "parent_department_id" field.
func ParentDepartmentIDLT(v int64) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldParentDepartmentID, v))
}

// ParentDepartmentIDLTE applies the LTE predicate on the "parent_department_id" field.
func ParentDepartmentIDLTE(v int64) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldParentDepartmentID, v))
}

// ParentDepartmentIDIsNil applies the IsNil predicate on the "parent_department_id" field.
func ParentDepartmentIDIsNil() predicate.Department {
	return predicate.Department(sql.FieldIsNull(FieldParentDepartmentID))
}

// ParentDepartmentIDNotNil applies the NotNil predicate on the "parent_department_id" field.
func ParentDepartmentIDNotNil() predicate.Department {
	return predicate.Department(sql.FieldNotNull(FieldParentDepartmentID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Department) predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Department) predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Department) predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		p(s.Not())
	})
}
